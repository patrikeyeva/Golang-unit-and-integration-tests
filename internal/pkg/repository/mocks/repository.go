// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	repository "homework5/internal/pkg/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticlesRepo is a mock of ArticlesRepo interface.
type MockArticlesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockArticlesRepoMockRecorder
}

// MockArticlesRepoMockRecorder is the mock recorder for MockArticlesRepo.
type MockArticlesRepoMockRecorder struct {
	mock *MockArticlesRepo
}

// NewMockArticlesRepo creates a new mock instance.
func NewMockArticlesRepo(ctrl *gomock.Controller) *MockArticlesRepo {
	mock := &MockArticlesRepo{ctrl: ctrl}
	mock.recorder = &MockArticlesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticlesRepo) EXPECT() *MockArticlesRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockArticlesRepo) Add(arg0 context.Context, arg1 *repository.Article) (*repository.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*repository.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockArticlesRepoMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockArticlesRepo)(nil).Add), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockArticlesRepo) DeleteByID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockArticlesRepoMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockArticlesRepo)(nil).DeleteByID), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockArticlesRepo) GetByID(arg0 context.Context, arg1 int64) (*repository.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*repository.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockArticlesRepoMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockArticlesRepo)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockArticlesRepo) Update(arg0 context.Context, arg1 *repository.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticlesRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticlesRepo)(nil).Update), arg0, arg1)
}

// MockCommentsRepo is a mock of CommentsRepo interface.
type MockCommentsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsRepoMockRecorder
}

// MockCommentsRepoMockRecorder is the mock recorder for MockCommentsRepo.
type MockCommentsRepoMockRecorder struct {
	mock *MockCommentsRepo
}

// NewMockCommentsRepo creates a new mock instance.
func NewMockCommentsRepo(ctrl *gomock.Controller) *MockCommentsRepo {
	mock := &MockCommentsRepo{ctrl: ctrl}
	mock.recorder = &MockCommentsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsRepo) EXPECT() *MockCommentsRepoMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockCommentsRepo) AddComment(arg0 context.Context, arg1 *repository.Comment) (*repository.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(*repository.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockCommentsRepoMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockCommentsRepo)(nil).AddComment), arg0, arg1)
}

// GetCommentsForArticle mocks base method.
func (m *MockCommentsRepo) GetCommentsForArticle(arg0 context.Context, arg1 int64) ([]repository.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForArticle", arg0, arg1)
	ret0, _ := ret[0].([]repository.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForArticle indicates an expected call of GetCommentsForArticle.
func (mr *MockCommentsRepoMockRecorder) GetCommentsForArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForArticle", reflect.TypeOf((*MockCommentsRepo)(nil).GetCommentsForArticle), arg0, arg1)
}
